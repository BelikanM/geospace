Voici exactement les parties pr√©cises √† remplacer dans ton script original (Analyse.js) pour int√©grer les deux mod√®les sans alt√©rer ta logique existante :


---

1. Remplace la section du chargement des mod√®les :

Cherche dans ton fichier original (dans useEffect o√π tu charges COCO-SSD) :

// Charger mod√®le COCO-SSD
console.log("Chargement du mod√®le COCO-SSD...");
const cocoModel = await cocoSsd.load({
  base: detectionMode === "fast" ? "lite_mobilenet_v2" : "mobilenet_v2"
});

Remplace par :

// Charger COCO-SSD
console.log("Chargement du mod√®le COCO-SSD...");
const cocoModel = await cocoSsd.load({
  base: detectionMode === "fast" ? "lite_mobilenet_v2" : "mobilenet_v2"
});

// Charger mod√®le YOLO personnalis√©
console.log("Chargement du mod√®le YOLO personnalis√©...");
const yoloModel = await tf.loadGraphModel('/models/lifemodo_tfjs/model.json');

// Stocker les mod√®les
modelRef.current = {
  cocoModel,
  yoloModel,
  customModelLoaded: true,
  createdAt: new Date()
};


---

2. Remplace la section de d√©tection dans la fonction detectFrame :

Cherche cette ligne :

const rawPredictions = await modelRef.current.cocoModel.detect(video, 10);

Remplace toute cette ligne par la logique fusionn√©e :

// COCO-SSD Predictions
const cocoPredictions = await modelRef.current.cocoModel.detect(video, 10);

// YOLO Predictions
const inputTensor = tf.browser.fromPixels(video)
  .resizeNearestNeighbor([640, 640])
  .expandDims()
  .div(255.0);

const yoloOutput = await modelRef.current.yoloModel.executeAsync(inputTensor);
const yoloData = await yoloOutput[0].array();
const yoloRawPredictions = yoloData[0];

const yoloPredictions = [];

for (let i = 0; i < yoloRawPredictions.length; i++) {
  const [x, y, w, h, score, classId] = yoloRawPredictions[i];
  if (score > 0.5) {
    yoloPredictions.push({
      bbox: [
        (x - w / 2) * 640,
        (y - h / 2) * 640,
        w * 640,
        h * 640
      ],
      class: `custom-${classId}`,
      score,
      icon: 'üîß'
    });
  }
}

// Fusion des pr√©dictions COCO-SSD et YOLO
const rawPredictions = [...cocoPredictions, ...yoloPredictions];

> Important : Remarque que je red√©finis la variable rawPredictions afin de pr√©server ton code existant (qui utilise d√©j√† rawPredictions).




---

3. (Optionnel mais conseill√©) :

Si tu souhaites une distinction claire entre les pr√©dictions COCO-SSD et YOLO dans la logique d'enrichissement (enrichPredictions), tu peux modifier la fonction originale comme suit :

Cherche ta fonction :

const enrichPredictions = (predictions) => {

Remplace-la par :

const enrichPredictions = (predictions) => {
  return predictions.map(prediction => ({
    ...prediction,
    icon: prediction.class.includes('custom-') ? 'üîß' : 'üîç',
    detectedAt: new Date().toISOString(),
    certainty: prediction.score > 0.8 ? "√âlev√©e" : prediction.score > 0.6 ? "Moyenne" : "Faible",
  }));
};


---

‚úÖ R√©sum√© tr√®s pr√©cis :

Chargement des mod√®les (useEffect au d√©but).

D√©tection et fusion (detectFrame dans la boucle principale).

Enrichissement distinctif (enrichPredictions).


Tu peux simplement copier-coller ces trois sections indiqu√©es √† leur place pr√©cise dans ton fichier Analyse.js original, et tout fonctionnera imm√©diatement avec les deux mod√®les associ√©s.


